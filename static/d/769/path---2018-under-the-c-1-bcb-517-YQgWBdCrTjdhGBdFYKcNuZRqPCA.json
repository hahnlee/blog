{"data":{"markdownRemark":{"html":"<h1>소개</h1>\n<ul>\n<li>Under the C 시리즈는 작년, 파이썬에 <a href=\"https://github.com/python/cpython/pull/3085\">아주 작은 기여</a>를 하며 공부한 내용을 정리한 글 입니다.</li>\n<li>잘못된 내용을 알려주신다면, 최대한 빨리 수정하도록 하겠습니다</li>\n<li>파이썬 구현체는 계속 발전하고 있으므로, 이 글의 내용과 다소 달라질 수 있습니다.</li>\n<li>특별한 언급이 없다면, 파이썬은 공식 구현체인\n<a href=\"https://github.com/python/cpython\">CPython</a>의 파이썬 3.x 구현을 의미합니다.</li>\n</ul>\n<h1>들어가며</h1>\n<p>파이썬은 <code class=\"language-text\">인터프리터 언어</code>다. 사소한 말이지만 몇가지 사실을 품고 있다.\n코드를 한줄 한줄 읽고 실행을 하는 인터프리터 언어는 컴파일 언어에 비해 최적화의 여지가 적다.</p>\n<p>인터프리터 언어를 다룬다면, 같은 결과가 나오는 코드를 작성하여도,\n프로그래머의 최적화, 언어의 이해도에 따라 꽤 다른 실행을 하는 코드를 작성할 수 있다.</p>\n<p>몇가지 동일한 결과를 내는 파이썬 코드를 비교해보자.</p>\n<h1>코드 최적화</h1>\n<p>다음 코드를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">fruits <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfruits<span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nfruits<span class=\"token punctuation\">[</span><span class=\"token string\">'strawberry'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span></code></pre></div>\n<p>빈 딕셔너리를 만들고 두쌍의 키-값을 할당했다. 위의 코드는 어떤 바이트 코드를 만들까?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> dis <span class=\"token keyword\">import</span> dis\ncode <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''\nfruits = dict()\nfruits['apple'] = 10\nfruits['strawberry'] = 20\n'''</span>\nco <span class=\"token operator\">=</span> <span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;string>'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'exec'</span><span class=\"token punctuation\">)</span>\ndis<span class=\"token punctuation\">(</span>co<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 코드로 바이트 코드를 확인 할 수 있다. <code class=\"language-text\">dis</code> 모듈은 파이썬의 내장 모듈로, 바이트코드 역어셈블러 모듈이다.</p>\n<p>위 코드를 인터프리터 모드에서 실행하면 다음와 같은 결과를 볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\">  2           0 LOAD_NAME                0 (dict)\n              2 CALL_FUNCTION            0\n              4 STORE_NAME               1 (fruits)\n\n  3           6 LOAD_CONST               0 (10)\n              8 LOAD_NAME                1 (fruits)\n             10 LOAD_CONST               1 (&#39;apple&#39;)\n             12 STORE_SUBSCR\n\n  4          14 LOAD_CONST               2 (20)\n             16 LOAD_NAME                1 (fruits)\n             18 LOAD_CONST               3 (&#39;strawberry&#39;)\n             20 STORE_SUBSCR\n             22 LOAD_CONST               4 (None)\n             24 RETURN_VALUE</code></pre></div>\n<p>딕셔너리를 만드는, 더 파이썬다운 코드는 제너릭을 이용하는 것 이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'apple'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'strawberry'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드도 같은 바이트코드를 만들까? 한번 코드의 바이트코드를 한번 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> dis <span class=\"token keyword\">import</span> dis\ncode <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''\nfruits = {\n    'apple': 10,\n    'strawberry': 20,\n}\n'''</span>\nco <span class=\"token operator\">=</span> <span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;string>'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'exec'</span><span class=\"token punctuation\">)</span>\ndis<span class=\"token punctuation\">(</span>co<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\">  3           0 LOAD_CONST               0 (10)\n\n  4           2 LOAD_CONST               1 (20)\n              4 LOAD_CONST               2 ((&#39;apple&#39;, &#39;strawberry&#39;))\n              6 BUILD_CONST_KEY_MAP      2\n              8 STORE_NAME               0 (fruits)\n             10 LOAD_CONST               3 (None)\n             12 RETURN_VALUE</code></pre></div>\n<p>같은 역할을 하지만 서로 다른 바이트코드를 생성하는 것을 확인 할 수 있다.\n사실 이 예제는 파이썬 입장에선 조금 억울 하고, 최적화가 쉽지 않을 수 있다.\n파이썬 인터프리터에게 첫번째 코드는 3줄의 코드이며, 두번째 코드는 한줄의 코드이기 때문이다.\n(파이썬은 괄호안의 줄바꿈을 무시한다)</p>\n<p>그렇다면 한가지 예를 더 살펴 보자.\nPyConKR 2017에서 차영호님이 라이트닝 토크 시간에 발표한,\n<a href=\"https://docs.google.com/presentation/d/1mpgEviFIolgPLy3tYjK2DIEWRKT671vJdb4RCiXvCyY/\">Back to the Low Level</a>\n에서 코드와 내용을 가져왔다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">A <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n<span class=\"token keyword\">if</span> A <span class=\"token operator\">!=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> dis <span class=\"token keyword\">import</span> dis\ncode <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''\nA = False\nif A != True:\n    pass\n'''</span>\nco <span class=\"token operator\">=</span> <span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;string>'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'exec'</span><span class=\"token punctuation\">)</span>\ndis<span class=\"token punctuation\">(</span>co<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\">  2           0 LOAD_CONST               0 (False)\n              2 STORE_NAME               0 (A)\n\n  3           4 LOAD_NAME                0 (A)\n              6 LOAD_CONST               1 (True)\n              8 COMPARE_OP               3 (!=)\n             10 POP_JUMP_IF_FALSE       12\n\n  4     &gt;&gt;   12 LOAD_CONST               2 (None)\n             14 RETURN_VALUE</code></pre></div>\n<p>위 코드보다 더 파이썬 다운 코드는 아래와 같다. (조건문 실행여부를 이미 알고 있는건 넘어가자)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">A <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n<span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> A<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> dis <span class=\"token keyword\">import</span> dis\ncode <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''\nA = False\nif not A:\n    pass\n'''</span>\nco <span class=\"token operator\">=</span> <span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;string>'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'exec'</span><span class=\"token punctuation\">)</span>\ndis<span class=\"token punctuation\">(</span>co<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\">  2           0 LOAD_CONST               0 (False)\n              2 STORE_NAME               0 (A)\n\n  3           4 LOAD_NAME                0 (A)\n              6 POP_JUMP_IF_TRUE         8\n\n  4     &gt;&gt;    8 LOAD_CONST               1 (None)\n             10 RETURN_VALUE</code></pre></div>\n<p>위 코드는 매우 비슷하며, 같은 역할을 하지만, 두 코드는 서로 다른 바이트코드를 만들었고, 연산 횟수도 다르다.</p>\n<h2>Under the C</h2>\n<p>위의 두 코드를 C언어레벨에서 확인하면 더 두드러진 차이를 볼 수 있다.\n마찬가지로 PyConKR 2017에서 차영호님이 라이트닝 토크 시간에 발표한,\n<a href=\"https://docs.google.com/presentation/d/1mpgEviFIolgPLy3tYjK2DIEWRKT671vJdb4RCiXvCyY/\">Back to the Low Level</a>\n에서 코드와 내용을 가져왔다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> A <span class=\"token operator\">!=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<p>파이썬 인터프리터에게 위 코드는 다음의 C 코드와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">PyObject <span class=\"token operator\">*</span>T <span class=\"token operator\">=</span> Py_True<span class=\"token punctuation\">;</span>\n<span class=\"token function\">Py_INCREF</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">PyObject_RichCompareBool</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> Py_NE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">Py_DECREF</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그리고 이 코드는</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> A<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<p>다음의 코드와 같다</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">PyObject_Not</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>왜 파이썬 다운 코드를 작성해야하는지 이해할 수 있을 것이다.</p>\n<h2>여담</h2>\n<p>파이썬다운 코드가 항상 성능 향상을 약속하진 않다, 예를 들어 <code class=\"language-text\">elif</code>가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> dis <span class=\"token keyword\">import</span> dis\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">print_2</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> raw <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> raw <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\ndis<span class=\"token punctuation\">(</span>print_2<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\">  2           0 LOAD_FAST                0 (raw)\n              2 LOAD_CONST               1 (2)\n              4 COMPARE_OP               2 (==)\n              6 POP_JUMP_IF_FALSE       18\n\n  3           8 LOAD_GLOBAL              0 (print)\n             10 LOAD_FAST                0 (raw)\n             12 CALL_FUNCTION            1\n             14 POP_TOP\n             16 JUMP_FORWARD            26 (to 44)\n\n  5     &gt;&gt;   18 LOAD_FAST                0 (raw)\n             20 LOAD_CONST               2 (1)\n             22 COMPARE_OP               2 (==)\n             24 POP_JUMP_IF_FALSE       36\n\n  6          26 LOAD_GLOBAL              0 (print)\n             28 LOAD_FAST                0 (raw)\n             30 CALL_FUNCTION            1\n             32 POP_TOP\n             34 JUMP_FORWARD             8 (to 44)\n\n  8     &gt;&gt;   36 LOAD_GLOBAL              0 (print)\n             38 LOAD_CONST               1 (2)\n             40 CALL_FUNCTION            1\n             42 POP_TOP\n        &gt;&gt;   44 LOAD_CONST               0 (None)\n             46 RETURN_VALUE</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> dis <span class=\"token keyword\">import</span> dis\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">print_2</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> raw <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> raw <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\ndis<span class=\"token punctuation\">(</span>print_2<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\">  2           0 LOAD_FAST                0 (raw)\n              2 LOAD_CONST               1 (2)\n              4 COMPARE_OP               2 (==)\n              6 POP_JUMP_IF_FALSE       18\n\n  3           8 LOAD_GLOBAL              0 (print)\n             10 LOAD_FAST                0 (raw)\n             12 CALL_FUNCTION            1\n             14 POP_TOP\n             16 JUMP_FORWARD            26 (to 44)\n\n  4     &gt;&gt;   18 LOAD_FAST                0 (raw)\n             20 LOAD_CONST               2 (1)\n             22 COMPARE_OP               2 (==)\n             24 POP_JUMP_IF_FALSE       36\n\n  5          26 LOAD_GLOBAL              0 (print)\n             28 LOAD_FAST                0 (raw)\n             30 CALL_FUNCTION            1\n             32 POP_TOP\n             34 JUMP_FORWARD             8 (to 44)\n\n  7     &gt;&gt;   36 LOAD_GLOBAL              0 (print)\n             38 LOAD_CONST               1 (2)\n             40 CALL_FUNCTION            1\n             42 POP_TOP\n        &gt;&gt;   44 LOAD_CONST               0 (None)\n             46 RETURN_VALUE</code></pre></div>\n<p>줄번호는 다르지만 같은 바이트코드를 생성하는 걸 볼 수 있다. <code class=\"language-text\">elif</code>는 그저 문법 설탕이다.</p>\n<h1>마치며</h1>\n<blockquote>\n<p>섣부른 최적화는 만악의 근원이다 — 도널드 커누스</p>\n</blockquote>\n<p>사실 언어적 특성이 코딩에 미치는 영향보단, 프로그램의 로직이 더 중요하다고 생각한다.</p>\n<p>그러나 파이썬 인터프리터 (C언어) 아래에서 일어나는 일을 이해한다면,\n분명 더 나은 프로그래머가 될 수 있을 것이고, 재미있는 특성들도 알게 될 것이다.</p>\n<p>다음에는 파이썬을 이해하는데 매우 중요한 <code class=\"language-text\">PyObject</code>를 다룰 예정이다.</p>","fields":{"slug":"/2018/under-the-c-1/"},"frontmatter":{"title":"Under the C: 소개","date":"2018-04-11"}}},"pageContext":{"slug":"/2018/under-the-c-1/"}}